import json

# File to store the library data
LIBRARY_FILE = "library.txt"

# Load library data from a file
try:
    with open(LIBRARY_FILE, "r") as file:
        library = json.load(file)
except (FileNotFoundError, json.JSONDecodeError):
    library = []  # If file doesn't exist or is empty, initialize an empty library

def save_library():
    """Save the library to a file."""
    with open(LIBRARY_FILE, "w") as file:
        json.dump(library, file, indent=4)

def add_book():
    """Add a new book to the library."""
    title = input("Enter book title: ")
    author = input("Enter author name: ")
    year = input("Enter publication year: ")
    genre = input("Enter genre: ")
    read_status = input("Have you read this book? (yes/no): ").strip().lower() == "yes"
    
    book = {
        "title": title.title,
        "author": author.title,
        "year": int(year),  # Convert to integer
        "genre": genre.title,
        "read_status": read_status
    }
    library.append(book)
    save_library()
    print(f"Book '{title}' added successfully!\n")

def remove_book():
    """Remove a book from the library."""
    title = input("Enter the title of the book to remove: ")
    
    for book in library:
        if book["title"].lower() == title.lower():
            library.remove(book)
            save_library()
            print(f"Book '{title}' removed successfully!\n")
            return
    print("Book not found!\n")

def search_book():
    """Search for a book by title or author."""
    keyword = input("Enter book title or author name to search: ").lower()
    found_books = [book for book in library if keyword in book["title"].lower() or keyword in book["author"].lower()]
    
    if found_books:
        print("\nSearch Results:")
        for book in found_books:
            print(f"Title: {book['title']}, Author: {book['author']}, Year: {book['year']}, Genre: {book['genre']}, Read: {'Yes' if book['read_status'] else 'No'}")
    else:
        print("No matching books found.\n")

def display_books():
    """Display all books in the library."""
    if not library:
        print("No books in the library.\n")
        return
    
    print("\nLibrary Collection:")
    for book in library:
        print(f"Title: {book['title']}, Author: {book['author']}, Year: {book['year']}, Genre: {book['genre']}, Read: {'Yes' if book['read_status'] else 'No'}")
    print("")

def display_statistics():
    """Show total books and percentage read."""
    total_books = len(library)
    if total_books == 0:
        print("No books in the library to display statistics.\n")
        return
    
    read_books = sum(1 for book in library if book["read_status"])
    read_percentage = (read_books / total_books) * 100
    
    print(f"Total books: {total_books}")
    print(f"Books read: {read_books} ({read_percentage:.2f}%)\n")

def main():
    """Main menu for the Library Manager."""
    while True:
        print("\nPersonal Library Manager")
        print("1. Add a Book")
        print("2. Remove a Book")
        print("3. Search for a Book")
        print("4. Display All Books")
        print("5. Display Statistics")
        print("6. Exit")
        
        choice = input("Enter your choice: ")
        print("")
        
        if choice == "1":
            add_book()
        elif choice == "2":
            remove_book()
        elif choice == "3":
            search_book()
        elif choice == "4":
            display_books()
        elif choice == "5":
            display_statistics()
        elif choice == "6":
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice! Please select a valid option.\n")

# Run the program
if __name__ == "__main__":
    main()
